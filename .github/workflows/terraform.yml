name: "Terraform"

permissions:
  contents: read
  pull-requests: write
  issues: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  dev-plan:
    name: "Dev Plan"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          #role-to-assume: {{ secrets.AWS_ROLE_ARN }}

      - name: Terraform Init
        run: |
          bash -c './init-backend.sh'
          terraform init

      - name: Select Workspace
        run: terraform workspace select dev || terraform workspace new dev

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan for Dev Environment ðŸ“–\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  dev-apply:
    name: "Dev Apply"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: dev
    needs: []  # Automatic deployment

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          #role-to-assume: {{ secrets.AWS_ROLE_ARN }}

      - name: Terraform Init
        run: terraform init

      - name: Select Workspace
        run: terraform workspace select dev || terraform workspace new dev

      - name: Terraform Apply
        run: terraform apply -auto-approve


  prod-plan:
    name: "Prod Plan"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: prod
    needs: [dev-apply]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          #role-to-assume: {{ secrets.AWS_ROLE_ARN }}

      - name: Terraform Init
        run: terraform init

      - name: Select Workspace
        run: terraform workspace select prod || terraform workspace new prod

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

  prod-apply:
    name: "Prod Apply"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: prod
    needs: [prod-plan]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          #role-to-assume: {{ secrets.AWS_ROLE_ARN }}

      - name: Terraform Init
        run: terraform init

      - name: Select Workspace
        run: terraform workspace select prod || terraform workspace new prod

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
